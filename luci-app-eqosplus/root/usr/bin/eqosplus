#!/bin/bash 

# Copyright (C) 2006 OpenWrt.org
# Copyright 2022-2025 lava <byl0561@gmail.com>

crrun=$1
crid=$2
NAME=eqosplus
IDLIST="/var/$NAME.idlist"
TMPID="/var/$NAME.tmpid"
NETWORKS="/var/$NAME.networks"
bin_iptables=$(which iptables)   
bin_ip6tables=$(which ip6tables)
bin_tc=$(which tc)
bin_ip=$(which ip)
# Uncomment this to debug commands
DEBUG=0
## End

touch $IDLIST
touch $NETWORKS

# Debug functions - echo + run
dbg_iptables() {
	[ "${DEBUG:-0}" -eq 0 ] || echo "DEBUG: iptables $*"
	$bin_iptables "$*" 
}
dbg_ip6tables() {
	[ "${DEBUG:-0}" -eq 0 ] || echo "DEBUG: ip6tables $*"
	$bin_ip6tables "$*" 
}

dbg_tc() {
	[ "${DEBUG:-0}" -eq 0 ] || echo "DEBUG: tc $*"
	$bin_tc $*
}
dbg_ip() {
	[ "${DEBUG:-0}" -eq 0 ] || echo "DEBUG: ip $*"
	$bin_ip $*
}
is_macaddr() {
    if echo "$1" | grep -qE '^([0-9A-Fa-f]{2}[-:]){5}[0-9A-Fa-f]{2}$'; then
        return 0
    fi
    return 1
}

# Default commands
iptables="dbg_iptables"
ip6tables="dbg_ip6tables"
tc="dbg_tc"
ip="dbg_ip"
ipt(){
	$iptables $*
	$ip6tables $*
}

iptm(){
	$iptables "-t mangle $*"
	$ip6tables "-t mangle $*"
}

start_network() {
	network=$1
	dev=$(uci get network.$network.device)
	lanipaddr=$(uci -q get network.$network.ipaddr 2>/dev/null | awk -F '.' '{print $1"."$2"."$3".0/24"}')

	$ip link add dev ${dev}_ifb name ${dev}_ifb type ifb
	$ip link set dev ${dev}_ifb up
	$tc qdisc add dev ${dev} root handle 1:0 htb default 1
	$tc class add dev ${dev} parent 1:0 classid 1:1 htb rate 80gbit prio 0 quantum 1500
	
	$tc qdisc add dev ${dev}_ifb root handle 1:0 htb default 1
	$tc class add dev ${dev}_ifb parent 1:0 classid 1:1 htb rate 80gbit prio 0 quantum 1500
	
	$tc filter add dev ${dev} parent 1:0 protocol ipv4 prio 1 u32 match ip src "$lanipaddr" match ip dst "$lanipaddr" flowid 1:1
	$tc filter add dev ${dev}_ifb parent 1:0 protocol ipv4 prio 1 u32 match ip src "$lanipaddr" match ip dst "$lanipaddr" flowid 1:1

	$tc qdisc add dev ${dev} ingress
	$tc filter add dev ${dev} parent ffff: protocol all prio 2 u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ${dev}_ifb

	echo "${network}" >> $NETWORKS ;  cat $NETWORKS | sort | uniq  > $TMPID ;cat $TMPID >$NETWORKS ;rm -rf $TMPID
}

stop_network() {
	network=$1
	dev=$(uci get network.$network.device)

	$tc filter del dev ${dev} parent ffff: 2>/dev/null
	$tc qdisc del dev ${dev} ingress 2>/dev/null

	$tc filter del dev ${dev}_ifb parent 1:0 2>/dev/null
	$tc filter del dev ${dev} parent 1:0 2>/dev/null

	$tc qdisc del dev ${dev} root 2>/dev/null
	$tc qdisc del dev ${dev}_ifb root 2>/dev/null

	$ip link del dev ${dev}_ifb 2>/dev/null

	sed -i "/$network/d" $NETWORKS >/dev/null 2>&1
}

sync_networks() {
	all_networks=()
	for network in $(uci show $NAME | grep "enable='1'" | grep "network_" | grep -oE '@network_[^.]+' | sed 's/@network_//' | sed 's/\[.*\]//'); do
		network_exists=false
		for net in "${all_networks[@]}"; do
			if [[ "$net" == "$network" ]]; then
				network_exists=true
				break
			fi
		done
		if [[ "$network_exists" == false ]]; then
			all_networks+=("$network")
		fi
	done

	need_start=()
	need_stop=()
	running_networks=`cat $NETWORKS `
	for item in "${all_networks[@]}"; do
		item_exists=false
		for net in $running_networks; do
			if [[ "$net" == "$item" ]]; then
				item_exists=true
				break
			fi
		done
		if [[ "$item_exists" == false ]]; then
			need_start+=("$item")
		fi
	done
	for item in $running_networks; do
		item_exists=false
		for net in "${all_networks[@]}"; do
			if [[ "$net" == "$item" ]]; then
				item_exists=true
				break
			fi
		done
		if [[ "$item_exists" == false ]]; then
			need_stop+=("$item")
		fi
	done

	for item in "${need_start[@]}"; do
		start_network $item
	done

	for item in "${need_stop[@]}"; do
		stop_network $item
	done
}

stop_qos() {
	running_networks=`cat $NETWORKS `
	for item in $running_networks; do
		stop_network $item
	done
}

init_qosplus() {
	insmod sch_htb 2> /dev/null
	sync_networks
}

del_id() {
	device=$(uci -q get $NAME.@network_$1.mac )
	network=`echo $1 | sed 's/\[.*\]//' `
	dev=$(uci get network.$network.device)
	id=`echo $1 | sed -n 's/.*\[\([0-9]*\)\]/\1/p' `
	id=`echo -n "$dev" | md5sum | tr -dc '0-9' | tail -c 2 | awk -v n="$id" '{printf "%d", ($1 + 11) "00" + n}' `

	[ "${DEBUG:-0}" -eq 0 ] || echo "D: del_id $@" "--$id --$device"
	$tc qd del dev ${dev} parent 1:$id  2>/dev/null
	$tc qd del dev ${dev}_ifb parent 1:$id 2>/dev/null

	$tc class del dev ${dev} parent 1:1 classid 1:$id 2>/dev/null
	$tc class del dev ${dev}_ifb parent 1:1 classid 1:$id 2>/dev/null
	
	$tc filter del dev ${dev}_ifb pref $id 2>/dev/null
	$tc filter del dev ${dev} pref $id 2>/dev/null

	sed -i "/$1/d" $IDLIST >/dev/null 2>&1
}

add_mac() {
	mac=$(uci -q get $NAME.@network_$1.mac )
	DL=$(uci -q get $NAME.@network_$1.download 2>/dev/null | awk '{printf "%d", $1*8*1000}')
	UL=$(uci -q get $NAME.@network_$1.upload   2>/dev/null | awk '{printf "%d", $1*8*1000}')
	network=`echo $1 | sed 's/\[.*\]//' `
	dev=$(uci get network.$network.device)
	id=`echo $1 | sed -n 's/.*\[\([0-9]*\)\]/\1/p' `
	id=`echo -n "$dev" | md5sum | tr -dc '0-9' | tail -c 2 | awk -v n="$id" '{printf "%d", ($1 + 11) "00" + n}' `
	M0=$(echo $mac | cut -d : -f 1)$(echo $mac | cut -d : -f 2)
	M1=$(echo $mac | cut -d : -f 3)$(echo $mac | cut -d : -f 4)
	M2=$(echo $mac | cut -d : -f 5)$(echo $mac | cut -d : -f 6)

	[ "${DEBUG:-0}" -eq 0 ] || echo "D: add_mac $@ --id:$id --mac:$mac M012--$M0-$M1-$M2"
	if [ "$UL" -gt 0 ]; then
		$tc class add dev ${dev}_ifb parent 1:1 classid 1:$id htb rate "$UL"kbit ceil "$UL"kbit prio $id quantum 1500
		$tc qdisc add dev ${dev}_ifb parent 1:"$id" handle "$id": sfq perturb 1
		$tc filter add dev ${dev}_ifb parent 1: protocol ip prio $id u32 match u16 0x0800 0xFFFF at -2 match u16 0x"${M2}" 0xFFFF at -4 match u32 0x"${M0}${M1}" 0xFFFFFFFF at -8 flowid 1:$id
	elif [ "$UL" -eq 0 ]; then
		$tc filter add dev ${dev}_ifb parent 1: protocol ip prio $id u32 match u16 0x0800 0xFFFF at -2 match u16 0x"${M2}" 0xFFFF at -4 match u32 0x"${M0}${M1}" 0xFFFFFFFF at -8 flowid 1:1
	fi
	if [ "$DL" -gt 0 ]; then
		$tc class add dev ${dev} parent 1:1 classid 1:$id htb rate "$DL"kbit ceil "$DL"kbit prio $id quantum 1500
		$tc qdisc add dev ${dev} parent 1:"$id" handle "$id": sfq perturb 1
		$tc filter add dev ${dev} parent 1: protocol ip prio $id u32 match u16 0x0800 0xFFFF at -2 match u32 0x${M1}${M2} 0xFFFFFFFF at -12 match u16 0x${M0} 0xFFFF at -14 flowid 1:$id
	elif [ "$DL" -eq 0 ]; then
		$tc filter add dev ${dev} parent 1: protocol ip prio $id u32 match u16 0x0800 0xFFFF at -2 match u32 0x"${M1}${M2}" 0xFFFFFFFF at -12 match u16 0x"${M0}" 0xFFFF at -14 flowid 1:1
	fi

	echo "$1" >> $IDLIST ;  cat $IDLIST | sort | uniq  > $TMPID ;cat $TMPID >$IDLIST ;rm -rf $TMPID
}

add_ip() {
	ip=$(uci -q get $NAME.@network_$1.mac )
	DL=$(uci -q get $NAME.@network_$1.download 2>/dev/null | awk '{printf "%d", $1*8*1000}')
	UL=$(uci -q get $NAME.@network_$1.upload   2>/dev/null | awk '{printf "%d", $1*8*1000}')
	network=`echo $1 | sed 's/\[.*\]//' `
	dev=$(uci get network.$network.device)
	id=`echo $1 | sed -n 's/.*\[\([0-9]*\)\]/\1/p' `
	id=`echo -n "$dev" | md5sum | tr -dc '0-9' | tail -c 2 | awk -v n="$id" '{printf "%d", ($1 + 11) "00" + n}' `

	[ "${DEBUG:-0}" -eq 0 ] || echo "D: add_ip $@ --$id --$ip"
	Z=`echo $ip |awk -F '[/]' '{print $2}' `
	[ -n "$Z" ] && ip=`echo $ip |awk -F '[/]' '{print $1}' `|| Z=32
	if [ "$UL" -gt 0 ]; then
		$tc class add dev ${dev}_ifb parent 1:1 classid 1:$id htb rate "$UL"kbit ceil "$UL"kbit prio $id quantum 1500
		$tc qdisc add dev ${dev}_ifb parent 1:"$id" handle "$id": sfq perturb 1
		$tc filter add dev ${dev}_ifb parent 1:0 prio $id protocol ip u32 match ip src "$ip"/"$Z" classid 1:$id
	elif [ "$UL" -eq 0 ]; then
		$tc filter add dev ${dev}_ifb parent 1:0 prio $id protocol ip u32 match ip src "$ip"/"$Z" classid 1:1
	fi
	if [ "$DL" -gt 0 ]; then
		$tc class add dev ${dev} parent 1:1 classid 1:$id htb rate "$DL"kbit ceil "$DL"kbit prio $id quantum 1500
		$tc qdisc add dev ${dev} parent 1:"$id" handle "$id": sfq perturb 1
		$tc filter add dev ${dev} parent 1:0 prio $id protocol ip u32 match ip dst "$ip"/"$Z" classid 1:$id
	elif [ "$DL" -eq 0 ]; then
		$tc filter add dev ${dev} parent 1:0 prio $id protocol ip u32 match ip dst "$ip"/"$Z" classid 1:1
	fi

	echo "$1" >> $IDLIST ;  cat $IDLIST | sort | uniq  > $TMPID ;cat $TMPID >$IDLIST ;rm -rf $TMPID
}

check_item() {
    id=$1
	start_time=$(uci -q get $NAME.@network_$id.timestart 2>/dev/null)
	end_time=$(uci -q get $NAME.@network_$id.timeend 2>/dev/null)
	wweek=`uci -q get $NAME.@network_$id.week `
	current_time=$(date +%H:%M)
	current_weekday=$(date +%u)
	[ "$start_time" = "$end_time" ] || { 
		[[ "$start_time" < "$end_time" ]] && { [[ "$current_time" > "$start_time" ]] && [[ "$current_time" < "$end_time" ]] || return 0; }
		[[ "$start_time" > "$end_time" ]] && { [[ "$current_time" < "$start_time" ]] && [[ "$current_time" > "$end_time" ]] || return 0; }
	}
	for ww in `echo $wweek | sed 's/,/ /g' `; do 
		if [ $current_weekday = $ww ] || [ "x0" = "x$ww" ] ; then 
		      return 1
		fi
	done
	return 0
}

case "$crrun" in
	"stop")
		stop_qos
		> $IDLIST
		> $NETWORKS
	;;
	"start")
		idlist=`uci show $NAME | grep "enable='1'" | grep "network_" | grep -oE '@network_[^.]+' | sed 's/@network_//' `
		init_qosplus
		for id in $idlist ;do
			if check_item $id; then
				device=$(uci -q get $NAME.@network_$id.mac )
				if is_macaddr $device; then
				    add_mac $id
				else
				    add_ip $id
				fi
			else
				[ `cat $IDLIST  2>/dev/null | grep "${id}" | wc -l ` -gt 0 ] && {
					del_id $id
				}
			fi
		done
	;;
	"add")
		sync_networks
		for id in `echo $crid | sed 's/,/ /g' ` ;do
			device=$(uci -q get $NAME.@network_$id.mac )
			if is_macaddr $device; then
				add_mac $id
			else
				add_ip $id
			fi
		done
	;;
	"del")
		for id in `echo $crid | sed 's/,/ /g' ` ;do 
			del_id $id
		done
		sync_networks
	;;
	"status")
		running_networks=`cat $NETWORKS `
		for network in $running_networks; do
			dev=$(uci get network.$network.device)
			echo "### Statistics $dev ###"
			echo "# qdiscs #"
			tc -s qdisc show dev $dev
			echo "# class #"
			tc -s class show dev $dev
			echo "# filter #"
			tc -s filter show dev $dev root
			tc -s filter show dev $dev parent 1:
			echo "### Statistics  ${dev}_ifb ###"
			echo "# qdiscs #"
			tc -s qdisc show dev ${dev}_ifb
			echo "# class #"
			tc -s class show dev ${dev}_ifb
			echo "# filter #"
			tc -s filter show dev ${dev}_ifb root
			tc -s filter show dev ${dev}_ifb parent 1:
		done
	;;

esac
